
Microcontrollers_Week1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000116  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009d4  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000874  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000509  00000000  00000000  00001460  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  0000196c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000072f0  00000000  00000000  000019d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e2  00000000  00000000  00008cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00008da2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002a56  00000000  00000000  00008dd2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	23 d0       	rcall	.+70     	; 0xe0 <main>
  9a:	3b c0       	rjmp	.+118    	; 0x112 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <wait>:
	DDRC = 0b11111110;
	if(PINC == 0b00000001) {
		PORTD = 0x80;
		wait(500);
		PORTD = 0x00;
		wait(500);
  9e:	18 16       	cp	r1, r24
  a0:	19 06       	cpc	r1, r25
  a2:	6c f4       	brge	.+26     	; 0xbe <wait+0x20>
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	ef ec       	ldi	r30, 0xCF	; 207
  aa:	f7 e0       	ldi	r31, 0x07	; 7
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <wait+0xe>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <wait+0x14>
  b2:	00 00       	nop
  b4:	2f 5f       	subi	r18, 0xFF	; 255
  b6:	3f 4f       	sbci	r19, 0xFF	; 255
  b8:	82 17       	cp	r24, r18
  ba:	93 07       	cpc	r25, r19
  bc:	a9 f7       	brne	.-22     	; 0xa8 <wait+0xa>
  be:	08 95       	ret

000000c0 <ExecuteB4knightRider>:
notes:			state = 0 when button is not pressed yet and state = 1 when the button is pressed
Version :    	1.0
Author	:		Lars Moesman & Rick Verstraten
*******************************************************************/
{
	if(state == 0){
  c0:	89 2b       	or	r24, r25
  c2:	39 f4       	brne	.+14     	; 0xd2 <ExecuteB4knightRider+0x12>
		wait(85);			
  c4:	85 e5       	ldi	r24, 0x55	; 85
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	ea df       	rcall	.-44     	; 0x9e <wait>
		PORTD <<= 1;	//moves leds one place to the right
  ca:	82 b3       	in	r24, 0x12	; 18
  cc:	88 0f       	add	r24, r24
  ce:	82 bb       	out	0x12, r24	; 18
  d0:	08 95       	ret
	}else{
		wait(85);
  d2:	85 e5       	ldi	r24, 0x55	; 85
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	e3 df       	rcall	.-58     	; 0x9e <wait>
		PORTD >>= 1;	//moves leds one place to the left.
  d8:	82 b3       	in	r24, 0x12	; 18
  da:	86 95       	lsr	r24
  dc:	82 bb       	out	0x12, r24	; 18
  de:	08 95       	ret

000000e0 <main>:
notes:			Looping forever, flipping bits on PORTD
Version :    	DMK, Initial code
*******************************************************************/
{	
	
	DDRD = 0b11111111;
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x03;
  e4:	83 e0       	ldi	r24, 0x03	; 3
  e6:	82 bb       	out	0x12, r24	; 18
	int state = 0;	//state for switching shift direction.
  e8:	d0 e0       	ldi	r29, 0x00	; 0
  ea:	c0 e0       	ldi	r28, 0x00	; 0
	while (1)
	{
		//ExecuteB2();
		//ExecuteB3();
		ExecuteB4knightRider(state);
		if(PORTD == 0xC0){state = 1;}	//change state at the beginning and the end of PORTD
  ec:	ee 24       	eor	r14, r14
  ee:	e3 94       	inc	r14
  f0:	f1 2c       	mov	r15, r1
		if(PORTD == 0x03){state = 0;}
  f2:	00 e0       	ldi	r16, 0x00	; 0
  f4:	10 e0       	ldi	r17, 0x00	; 0
	int state = 0;	//state for switching shift direction.
	while (1)
	{
		//ExecuteB2();
		//ExecuteB3();
		ExecuteB4knightRider(state);
  f6:	8d 2f       	mov	r24, r29
  f8:	9c 2f       	mov	r25, r28
  fa:	e2 df       	rcall	.-60     	; 0xc0 <ExecuteB4knightRider>
		if(PORTD == 0xC0){state = 1;}	//change state at the beginning and the end of PORTD
  fc:	82 b3       	in	r24, 0x12	; 18
  fe:	80 3c       	cpi	r24, 0xC0	; 192
 100:	11 f4       	brne	.+4      	; 0x106 <main+0x26>
 102:	de 2d       	mov	r29, r14
 104:	cf 2d       	mov	r28, r15
		if(PORTD == 0x03){state = 0;}
 106:	82 b3       	in	r24, 0x12	; 18
 108:	83 30       	cpi	r24, 0x03	; 3
 10a:	a9 f7       	brne	.-22     	; 0xf6 <main+0x16>
 10c:	d0 2f       	mov	r29, r16
 10e:	c1 2f       	mov	r28, r17
 110:	f2 cf       	rjmp	.-28     	; 0xf6 <main+0x16>

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
