
Microcontrollers_Week1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000142  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aa0  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008cf  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000055a  00000000  00000000  000015bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00001b18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00007323  00000000  00000000  00001bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000174  00000000  00000000  00008edf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00009053  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002a56  00000000  00000000  0000908b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e4       	ldi	r30, 0x42	; 66
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	36 d0       	rcall	.+108    	; 0x120 <main>
  b4:	44 c0       	rjmp	.+136    	; 0x13e <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <wait>:
	for(index = 0;index < (sizeof(pattern2) / sizeof(pattern2[0]));index++) {
		PORTD = pattern2[index].data;
		wait(pattern2[index].wait);
	}
	
}
  b8:	18 16       	cp	r1, r24
  ba:	19 06       	cpc	r1, r25
  bc:	6c f4       	brge	.+26     	; 0xd8 <wait+0x20>
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	ef ec       	ldi	r30, 0xCF	; 207
  c4:	f7 e0       	ldi	r31, 0x07	; 7
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <wait+0xe>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <wait+0x14>
  cc:	00 00       	nop
  ce:	2f 5f       	subi	r18, 0xFF	; 255
  d0:	3f 4f       	sbci	r19, 0xFF	; 255
  d2:	82 17       	cp	r24, r18
  d4:	93 07       	cpc	r25, r19
  d6:	a9 f7       	brne	.-22     	; 0xc2 <wait+0xa>
  d8:	08 95       	ret

000000da <ExecuteB4knightRider>:
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	ec 01       	movw	r28, r24
  e0:	88 81       	ld	r24, Y
  e2:	99 81       	ldd	r25, Y+1	; 0x01
  e4:	89 2b       	or	r24, r25
  e6:	39 f4       	brne	.+14     	; 0xf6 <ExecuteB4knightRider+0x1c>
  e8:	85 e5       	ldi	r24, 0x55	; 85
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	e5 df       	rcall	.-54     	; 0xb8 <wait>
  ee:	82 b3       	in	r24, 0x12	; 18
  f0:	88 0f       	add	r24, r24
  f2:	82 bb       	out	0x12, r24	; 18
  f4:	06 c0       	rjmp	.+12     	; 0x102 <ExecuteB4knightRider+0x28>
  f6:	85 e5       	ldi	r24, 0x55	; 85
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	de df       	rcall	.-68     	; 0xb8 <wait>
  fc:	82 b3       	in	r24, 0x12	; 18
  fe:	86 95       	lsr	r24
 100:	82 bb       	out	0x12, r24	; 18
 102:	82 b3       	in	r24, 0x12	; 18
 104:	80 3c       	cpi	r24, 0xC0	; 192
 106:	21 f4       	brne	.+8      	; 0x110 <ExecuteB4knightRider+0x36>
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	99 83       	std	Y+1, r25	; 0x01
 10e:	88 83       	st	Y, r24
 110:	82 b3       	in	r24, 0x12	; 18
 112:	83 30       	cpi	r24, 0x03	; 3
 114:	11 f4       	brne	.+4      	; 0x11a <ExecuteB4knightRider+0x40>
 116:	19 82       	std	Y+1, r1	; 0x01
 118:	18 82       	st	Y, r1
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <main>:
inputs:
outputs:
notes:			Looping forever, flipping bits on PORTD
Version :    	DMK, Initial code
*******************************************************************/
{	
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	00 d0       	rcall	.+0      	; 0x126 <main+0x6>
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
	
	DDRD = 0b11111111;
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x03;
 12e:	83 e0       	ldi	r24, 0x03	; 3
 130:	82 bb       	out	0x12, r24	; 18
	int state = 0;	//state for switching shift direction.
 132:	1a 82       	std	Y+2, r1	; 0x02
 134:	19 82       	std	Y+1, r1	; 0x01
		//ExecuteB2();
		//ExecuteB3();

		//ExecuteB5();

		ExecuteB4knightRider(&state);
 136:	ce 01       	movw	r24, r28
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	cf df       	rcall	.-98     	; 0xda <ExecuteB4knightRider>
 13c:	fc cf       	rjmp	.-8      	; 0x136 <main+0x16>

0000013e <_exit>:
 13e:	f8 94       	cli

00000140 <__stop_program>:
 140:	ff cf       	rjmp	.-2      	; 0x140 <__stop_program>
